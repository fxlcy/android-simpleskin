import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven'

group = 'cn.fxlcy.libs.skin'
version = '1.2.0'

uploadArchives {
    repositories {
        mavenDeployer {
            //提交到远程服务器：
            repository(url: mavenUrl) {
                authentication(userName: mavenUn, password: mavenPwd)
            }
        }
    }
}


android {
    compileSdkVersion 28



    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation project(':layout_inflater')
    implementation 'com.android.support:appcompat-v7:28.0.0'
}


afterEvaluate {
    tasks.find {
        it.name == 'assembleRelease'
    }.doLast {
        File file = new File(buildDir, "outputs/aar/" + project.name + "-release.aar")


        if (!file.exists()) {
            return
        }

        File outFile = new File(buildDir, "outputs/jar/" + project.name + '.jar')
        if(!outFile.parentFile.exists()){
            outFile.parentFile.mkdirs()
        }

        outFile.createNewFile()

        def zis = new ZipInputStream(new FileInputStream(file.absolutePath))

        ZipEntry zipEntry
        byte[] buffer = new byte[1024 * 1000 * 10]

        while ((zipEntry = zis.nextEntry) != null) {
            if (zipEntry.name == 'classes.jar') {

                int len
                def os = new FileOutputStream(outFile)

                while ((len = zis.read(buffer)) != -1) {
                    os.write(buffer, 0, len)
                }

                os.close()

                break
            }
        }

        zis.close()
    }
}
